{"version":3,"sources":["ng://ngx-contextmenu/lib/contextMenu.tokens.ts","ng://ngx-contextmenu/lib/contextMenuContent.component.ts","ng://ngx-contextmenu/lib/contextMenu.service.ts","ng://ngx-contextmenu/lib/contextMenu.attach.directive.ts","ng://ngx-contextmenu/lib/contextMenu.item.directive.ts","ng://ngx-contextmenu/lib/contextMenu.component.ts","ng://ngx-contextmenu/lib/ngx-contextmenu.ts"],"names":["CONTEXT_MENU_OPTIONS","InjectionToken","ContextMenuContentComponent","changeDetector","elementRef","options","renderer","this","EventEmitter","Subscription","autoFocus","useBootstrap4","prototype","ngOnInit","_this","menuItems","forEach","menuItem","currentItem","item","subscription","add","execute","subscribe","event","emit","tslib_1","__assign","queryList","QueryList","reset","_keyManager","ActiveDescendantKeyManager","withWrap","ngAfterViewInit","setTimeout","focus","overlay","updatePosition","ngOnDestroy","unsubscribe","menuElement","nativeElement","stopEvent","$event","stopPropagation","isMenuItemEnabled","evaluateIfFunction","enabled","isMenuItemVisible","visible","value","Function","isDisabled","link","onKeyEvent","isLeaf","onKeydown","keyboardOpenSubMenu","cancelEvent","activeItemIndex","onOpenSubMenu","keyboardMenuItemSelect","onMenuItemSelect","onCloseLeafMenu","closeLeafMenu","exceptRootMenu","keyCode","closeMenu","type","button","closeAllMenus","anchorElementRef","menuItemElements","toArray","anchorElement","openSubMenu","contextMenu","subMenu","parentContextMenu","preventDefault","triggerExecute","target","indexOf","tagName","isContentEditable","Component","args","selector","styles","template","ChangeDetectorRef","ElementRef","Optional","Inject","Renderer","Input","Output","ViewChild","ViewChildren","HostListener","ContextMenuService","scrollStrategy","Subject","getBoundingClientRect","bottom","height","left","right","top","width","openContextMenu","context","positionStrategy","position","connectedTo","originX","originY","overlayX","overlayY","withFallbackPosition","newOverlay","create","panelClass","close","destroySubMenus","overlays","concat","attachContextMenu","mouseEvent_1","fakeElement","clientY","clientX","closeAllContextMenus","eventType","menuClass","contextMenuContent","attach","ComponentPortal","instance","subscriptions","asObservable","executeEvent","closeAllEvent","closeLeafMenuEvent","destroyLeafMenu","subMenuEvent","show","next","onDestroy","isActive","closeEvent","index","detach","dispose","getLastAttachedOverlay","length","hasAttached","slice","_a","_b","isDestroyingLeafMenu","newLeaf","subMenuOverlay","isLeafMenu","Injectable","Overlay","ScrollStrategyOptions","ContextMenuAttachDirective","contextMenuService","onContextMenu","contextMenuSubject","Directive","ContextMenuItemDirective","passive","divider","setActiveStyles","setInactiveStyles","TemplateRef","ContextMenuComponent","_contextMenuService","menuEvent","onMenuEvent","disabled","setVisibleMenuItems","visibleMenuItems","pipe","first","open","filter","encapsulation","ViewEncapsulation","None","ContentChildren","ContextMenuModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","entryComponents","exports","imports","CommonModule","OverlayModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const CONTEXT_MENU_OPTIONS = new InjectionToken('CONTEXT_MENU_OPTIONS');\n","import { CloseLeafMenuEvent, IContextMenuClickEvent } from './contextMenu.service';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Inject,\n    Input,\n    Optional,\n    Renderer,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { EventEmitter, OnDestroy, OnInit, Output, QueryList, HostListener } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ContextMenuItemDirective } from './contextMenu.item.directive';\nimport { IContextMenuOptions } from './contextMenu.options';\nimport { CONTEXT_MENU_OPTIONS } from './contextMenu.tokens';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\n\nexport interface ILinkConfig {\n  click: (item: any, $event?: MouseEvent) => void;\n  enabled?: (item: any) => boolean;\n  html: (item: any) => string;\n}\n\nconst ARROW_LEFT_KEYCODE = 37;\n\n@Component({\n  selector: 'context-menu-content',\n  styles: [\n    `.passive {\n       display: block;\n       padding: 3px 20px;\n       clear: both;\n       font-weight: normal;\n       line-height: @line-height-base;\n       white-space: nowrap;\n     }\n    .hasSubMenu:before {\n      content: \"\\u25B6\";\n      float: right;\n    }`,\n  ],\n  template:\n  `<div class=\"dropdown open show ngx-contextmenu\" [ngClass]=\"menuClass\" tabindex=\"0\">\n      <ul #menu class=\"dropdown-menu show\" style=\"position: static; float: none;\" tabindex=\"0\">\n        <li #li *ngFor=\"let menuItem of menuItems; let i = index\" [class.disabled]=\"!isMenuItemEnabled(menuItem)\"\n            [class.divider]=\"menuItem.divider\" [class.dropdown-divider]=\"useBootstrap4 && menuItem.divider\"\n            [class.active]=\"menuItem.isActive && isMenuItemEnabled(menuItem)\"\n            [attr.role]=\"menuItem.divider ? 'separator' : undefined\">\n          <a *ngIf=\"!menuItem.divider && !menuItem.passive\" href [class.dropdown-item]=\"useBootstrap4\"\n            [class.active]=\"menuItem.isActive && isMenuItemEnabled(menuItem)\"\n            [class.disabled]=\"useBootstrap4 && !isMenuItemEnabled(menuItem)\" [class.hasSubMenu]=\"!!menuItem.subMenu\"\n            (click)=\"onMenuItemSelect(menuItem, $event)\" (mouseenter)=\"onOpenSubMenu(menuItem, $event)\">\n            <ng-template [ngTemplateOutlet]=\"menuItem.template\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n          </a>\n\n          <span (click)=\"stopEvent($event)\" (contextmenu)=\"stopEvent($event)\" class=\"passive\"\n                *ngIf=\"!menuItem.divider && menuItem.passive\" [class.dropdown-item]=\"useBootstrap4\"\n                [class.disabled]=\"useBootstrap4 && !isMenuItemEnabled(menuItem)\">\n            <ng-template [ngTemplateOutlet]=\"menuItem.template\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n          </span>\n        </li>\n      </ul>\n    </div>\n  `,\n})\nexport class ContextMenuContentComponent implements OnInit, OnDestroy, AfterViewInit {\n  @Input() public menuItems: ContextMenuItemDirective[] = [];\n  @Input() public item: any;\n  @Input() public event: MouseEvent | KeyboardEvent;\n  @Input() public parentContextMenu: ContextMenuContentComponent;\n  @Input() public menuClass: string;\n  @Input() public overlay: OverlayRef;\n  @Input() public isLeaf = false;\n  @Output() public execute: EventEmitter<{ event: MouseEvent | KeyboardEvent, item: any, menuItem: ContextMenuItemDirective }>\n    = new EventEmitter();\n  @Output() public openSubMenu: EventEmitter<IContextMenuClickEvent> = new EventEmitter();\n  @Output() public closeLeafMenu: EventEmitter<CloseLeafMenuEvent> = new EventEmitter();\n  @Output() public closeAllMenus: EventEmitter<{ event: MouseEvent }> = new EventEmitter();\n  @ViewChild('menu') public menuElement: ElementRef;\n  @ViewChildren('li') public menuItemElements: QueryList<ElementRef>;\n\n  public autoFocus = false;\n  public useBootstrap4 = false;\n  private _keyManager: ActiveDescendantKeyManager<ContextMenuItemDirective>;\n  private subscription: Subscription = new Subscription();\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private elementRef: ElementRef,\n    @Optional()\n    @Inject(CONTEXT_MENU_OPTIONS) private options: IContextMenuOptions,\n    public renderer: Renderer,\n  ) {\n    if (options) {\n      this.autoFocus = options.autoFocus;\n      this.useBootstrap4 = options.useBootstrap4;\n    }\n  }\n\n  ngOnInit(): void {\n    this.menuItems.forEach(menuItem => {\n      menuItem.currentItem = this.item;\n      this.subscription.add(menuItem.execute.subscribe(event => this.execute.emit({ ...event, menuItem })));\n    });\n    const queryList = new QueryList<ContextMenuItemDirective>();\n    queryList.reset(this.menuItems);\n    this._keyManager = new ActiveDescendantKeyManager<ContextMenuItemDirective>(queryList).withWrap();\n  }\n\n  ngAfterViewInit() {\n    if (this.autoFocus) {\n      setTimeout(() => this.focus());\n    }\n    this.overlay.updatePosition();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  focus(): void {\n    if (this.autoFocus) {\n      this.menuElement.nativeElement.focus();\n    }\n  }\n\n  stopEvent($event: MouseEvent) {\n    $event.stopPropagation();\n  }\n\n  public isMenuItemEnabled(menuItem: ContextMenuItemDirective): boolean {\n    return this.evaluateIfFunction(menuItem && menuItem.enabled);\n  }\n\n  public isMenuItemVisible(menuItem: ContextMenuItemDirective): boolean {\n    return this.evaluateIfFunction(menuItem && menuItem.visible);\n  }\n\n  public evaluateIfFunction(value: any): any {\n    if (value instanceof Function) {\n      return value(this.item);\n    }\n    return value;\n  }\n\n  public isDisabled(link: ILinkConfig): boolean {\n    return link.enabled && !link.enabled(this.item);\n  }\n\n  @HostListener('window:keydown.ArrowDown', ['$event'])\n  @HostListener('window:keydown.ArrowUp', ['$event'])\n  public onKeyEvent(event: KeyboardEvent): void {\n    if (!this.isLeaf) {\n      return;\n    }\n    this._keyManager.onKeydown(event);\n  }\n\n  @HostListener('window:keydown.ArrowRight', ['$event'])\n  public keyboardOpenSubMenu(event?: KeyboardEvent): void {\n    if (!this.isLeaf) {\n      return;\n    }\n    this.cancelEvent(event);\n    const menuItem = this.menuItems[this._keyManager.activeItemIndex];\n    if (menuItem) {\n      this.onOpenSubMenu(menuItem);\n    }\n  }\n\n  @HostListener('window:keydown.Enter', ['$event'])\n  @HostListener('window:keydown.Space', ['$event'])\n  public keyboardMenuItemSelect(event?: KeyboardEvent): void {\n    if (!this.isLeaf) {\n      return;\n    }\n    this.cancelEvent(event);\n    const menuItem = this.menuItems[this._keyManager.activeItemIndex];\n    if (menuItem) {\n      this.onMenuItemSelect(menuItem, event);\n    }\n  }\n\n  @HostListener('window:keydown.Escape', ['$event'])\n  @HostListener('window:keydown.ArrowLeft', ['$event'])\n  public onCloseLeafMenu(event: KeyboardEvent): void {\n    if (!this.isLeaf) {\n      return;\n    }\n    this.cancelEvent(event);\n    this.closeLeafMenu.emit({ exceptRootMenu: event.keyCode === ARROW_LEFT_KEYCODE, event });\n  }\n\n  @HostListener('document:click', ['$event'])\n  @HostListener('document:contextmenu', ['$event'])\n  public closeMenu(event: MouseEvent): void {\n    if (event.type === 'click' && event.button === 2) {\n      return;\n    }\n    this.closeAllMenus.emit({event});\n  }\n\n  public onOpenSubMenu(menuItem: ContextMenuItemDirective, event?: MouseEvent | KeyboardEvent): void {\n    const anchorElementRef = this.menuItemElements.toArray()[this._keyManager.activeItemIndex];\n    const anchorElement = anchorElementRef && anchorElementRef.nativeElement;\n    this.openSubMenu.emit({\n      anchorElement,\n      contextMenu: menuItem.subMenu,\n      event,\n      item: this.item,\n      parentContextMenu: this,\n    });\n  }\n\n  public onMenuItemSelect(menuItem: ContextMenuItemDirective, event: MouseEvent | KeyboardEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n    this.onOpenSubMenu(menuItem, event);\n    if (!menuItem.subMenu) {\n      menuItem.triggerExecute(this.item, event);\n    }\n  }\n\n  private cancelEvent(event): void {\n    if (!event) {\n      return;\n    }\n\n    const target: HTMLElement = event.target;\n    if (['INPUT', 'TEXTAREA', 'SELECT'].indexOf(target.tagName) > -1 || target.isContentEditable) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n","import { Overlay, OverlayRef, ScrollStrategyOptions } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ComponentRef, Injectable } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { ContextMenuComponent } from './contextMenu.component';\nimport { ContextMenuItemDirective } from './contextMenu.item.directive';\nimport { ContextMenuContentComponent } from './contextMenuContent.component';\n\nexport interface IContextMenuClickEvent {\n  anchorElement?: Element | EventTarget;\n  contextMenu?: ContextMenuComponent;\n  event?: MouseEvent | KeyboardEvent;\n  parentContextMenu?: ContextMenuContentComponent;\n  item: any;\n  activeMenuItemIndex?: number;\n}\nexport interface IContextMenuContext extends IContextMenuClickEvent {\n  menuItems: ContextMenuItemDirective[];\n  menuClass: string;\n}\nexport interface CloseLeafMenuEvent {\n  exceptRootMenu?: boolean;\n  event?: MouseEvent | KeyboardEvent;\n}\nexport interface OverlayRefWithContextMenu extends OverlayRef {\n  contextMenu?: ContextMenuContentComponent;\n}\n\nexport interface CancelContextMenuEvent {\n  eventType: 'cancel';\n  event?: MouseEvent | KeyboardEvent;\n}\nexport interface ExecuteContextMenuEvent {\n  eventType: 'execute';\n  event?: MouseEvent | KeyboardEvent;\n  item: any;\n  menuItem: ContextMenuItemDirective;\n}\nexport type CloseContextMenuEvent = ExecuteContextMenuEvent | CancelContextMenuEvent;\n\n@Injectable()\nexport class ContextMenuService {\n  public isDestroyingLeafMenu = false;\n\n  public show: Subject<IContextMenuClickEvent> = new Subject<IContextMenuClickEvent>();\n  public triggerClose: Subject<ContextMenuContentComponent> = new Subject();\n  public close: Subject<CloseContextMenuEvent> = new Subject();\n\n  private contextMenuContent: ComponentRef<ContextMenuContentComponent>;\n  private overlays: OverlayRef[] = [];\n  private fakeElement: any = {\n    getBoundingClientRect: (): ClientRect => ({\n      bottom: 0,\n      height: 0,\n      left: 0,\n      right: 0,\n      top: 0,\n      width: 0,\n    })\n  };\n\n  constructor(\n    private overlay: Overlay,\n    private scrollStrategy: ScrollStrategyOptions,\n  ) { }\n\n  public openContextMenu(context: IContextMenuContext) {\n    const { anchorElement, event, parentContextMenu } = context;\n\n    if (!parentContextMenu) {\n      const mouseEvent = event as MouseEvent;\n      this.fakeElement.getBoundingClientRect = (): ClientRect => ({\n        bottom: mouseEvent.clientY,\n        height: 0,\n        left: mouseEvent.clientX,\n        right: mouseEvent.clientX,\n        top: mouseEvent.clientY,\n        width: 0,\n      });\n      this.closeAllContextMenus({ eventType: 'cancel', event });\n      const positionStrategy = this.overlay.position().connectedTo(\n        { nativeElement: anchorElement || this.fakeElement },\n        { originX: 'start', originY: 'bottom' },\n        { overlayX: 'start', overlayY: 'top' })\n        .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' })\n        .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'start', overlayY: 'top' })\n        .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'end', overlayY: 'top' })\n        .withFallbackPosition(\n        { originX: 'end', originY: 'center' },\n        { overlayX: 'start', overlayY: 'center' })\n        .withFallbackPosition(\n        { originX: 'start', originY: 'center' },\n        { overlayX: 'end', overlayY: 'center' })\n        ;\n      this.overlays = [this.overlay.create({\n        positionStrategy,\n        panelClass: 'ngx-contextmenu',\n        scrollStrategy: this.scrollStrategy.close(),\n      })];\n      this.attachContextMenu(this.overlays[0], context);\n    } else {\n      const positionStrategy = this.overlay.position().connectedTo(\n        { nativeElement: event ? event.target : anchorElement },\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'start', overlayY: 'top' })\n        .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'end', overlayY: 'top' })\n        .withFallbackPosition(\n        { originX: 'end', originY: 'bottom' },\n        { overlayX: 'start', overlayY: 'bottom' })\n        .withFallbackPosition(\n        { originX: 'start', originY: 'bottom' },\n        { overlayX: 'end', overlayY: 'bottom' })\n        ;\n      const newOverlay = this.overlay.create({\n        positionStrategy,\n        panelClass: 'ngx-contextmenu',\n        scrollStrategy: this.scrollStrategy.close(),\n      });\n      this.destroySubMenus(parentContextMenu);\n      this.overlays = this.overlays.concat(newOverlay);\n      this.attachContextMenu(newOverlay, context);\n    }\n  }\n\n  public attachContextMenu(overlay: OverlayRef, context: IContextMenuContext): void {\n    const { event, item, menuItems, menuClass } = context;\n\n    const contextMenuContent: ComponentRef<ContextMenuContentComponent> = overlay.attach(new ComponentPortal(ContextMenuContentComponent));\n    contextMenuContent.instance.event = event;\n    contextMenuContent.instance.item = item;\n    contextMenuContent.instance.menuItems = menuItems;\n    contextMenuContent.instance.overlay = overlay;\n    contextMenuContent.instance.isLeaf = true;\n    contextMenuContent.instance.menuClass = menuClass;\n    (<OverlayRefWithContextMenu>overlay).contextMenu = contextMenuContent.instance;\n\n    const subscriptions: Subscription = new Subscription();\n    subscriptions.add(contextMenuContent.instance.execute.asObservable()\n      .subscribe((executeEvent) => this.closeAllContextMenus({ eventType: 'execute', ...executeEvent })));\n    subscriptions.add(contextMenuContent.instance.closeAllMenus.asObservable()\n      .subscribe((closeAllEvent) => this.closeAllContextMenus({ eventType: 'cancel', ...closeAllEvent })));\n    subscriptions.add(contextMenuContent.instance.closeLeafMenu.asObservable()\n      .subscribe(closeLeafMenuEvent => this.destroyLeafMenu(closeLeafMenuEvent)));\n    subscriptions.add(contextMenuContent.instance.openSubMenu.asObservable()\n      .subscribe((subMenuEvent: IContextMenuContext) => {\n        this.destroySubMenus(contextMenuContent.instance);\n        if (!subMenuEvent.contextMenu) {\n          contextMenuContent.instance.isLeaf = true;\n          return;\n        }\n        contextMenuContent.instance.isLeaf = false;\n        this.show.next(subMenuEvent);\n      }));\n    contextMenuContent.onDestroy(() => {\n      menuItems.forEach(menuItem => menuItem.isActive = false);\n      subscriptions.unsubscribe();\n    });\n  }\n\n  public closeAllContextMenus(closeEvent: CloseContextMenuEvent): void {\n    if (this.overlays) {\n      this.close.next(closeEvent);\n      this.overlays.forEach((overlay, index) => {\n        overlay.detach();\n        overlay.dispose();\n      });\n    }\n    this.overlays = [];\n  }\n\n  public getLastAttachedOverlay(): OverlayRefWithContextMenu {\n    let overlay: OverlayRef = this.overlays[this.overlays.length - 1];\n    while (this.overlays.length > 1 && overlay && !overlay.hasAttached()) {\n      overlay.detach();\n      overlay.dispose();\n      this.overlays = this.overlays.slice(0, -1);\n      overlay = this.overlays[this.overlays.length - 1];\n    }\n    return overlay;\n  }\n\n  public destroyLeafMenu({ exceptRootMenu, event }: CloseLeafMenuEvent = {}): void {\n    if (this.isDestroyingLeafMenu) {\n      return;\n    }\n    this.isDestroyingLeafMenu = true;\n\n    setTimeout(() => {\n      const overlay = this.getLastAttachedOverlay();\n      if (this.overlays.length > 1 && overlay) {\n        overlay.detach();\n        overlay.dispose();\n      }\n      if (!exceptRootMenu && this.overlays.length > 0 && overlay) {\n        this.close.next({ eventType: 'cancel', event });\n        overlay.detach();\n        overlay.dispose();\n      }\n\n      const newLeaf = this.getLastAttachedOverlay();\n      if (newLeaf) {\n        newLeaf.contextMenu.isLeaf = true;\n      }\n\n      this.isDestroyingLeafMenu = false;\n    });\n  }\n\n  public destroySubMenus(contextMenu: ContextMenuContentComponent): void {\n    const overlay = contextMenu.overlay;\n    const index = this.overlays.indexOf(overlay);\n    this.overlays.slice(index + 1).forEach(subMenuOverlay => {\n      subMenuOverlay.detach();\n      subMenuOverlay.dispose();\n    });\n  }\n\n  public isLeafMenu(contextMenuContent: ContextMenuContentComponent): boolean {\n    const overlay = this.getLastAttachedOverlay();\n    return contextMenuContent.overlay === overlay;\n  }\n}\n","import { ContextMenuComponent } from './contextMenu.component';\nimport { ContextMenuService } from './contextMenu.service';\nimport { Directive, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[contextMenu]',\n})\nexport class ContextMenuAttachDirective {\n  @Input() public contextMenuSubject: any;\n  @Input() public contextMenu: ContextMenuComponent;\n\n  constructor(private contextMenuService: ContextMenuService) { }\n\n  @HostListener('contextmenu', ['$event'])\n  public onContextMenu(event: MouseEvent): void {\n    this.contextMenuService.show.next({\n      contextMenu: this.contextMenu,\n      event,\n      item: this.contextMenuSubject,\n    });\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n","import { Highlightable } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\n\n@Directive({\n  /* tslint:disable:directive-selector-type */\n  selector: '[contextMenuItem]',\n  /* tslint:enable:directive-selector-type */\n})\nexport class ContextMenuItemDirective implements Highlightable {\n  @Input() public subMenu: any;\n  @Input() public divider = false;\n  @Input() public enabled: boolean | ((item: any) => boolean) = true;\n  @Input() public passive = false;\n  @Input() public visible: boolean | ((item: any) => boolean) = true;\n  @Output() public execute: EventEmitter<{ event: Event, item: any }> = new EventEmitter();\n\n  public currentItem: any;\n  public isActive = false;\n  public get disabled() {\n    return this.passive ||\n      this.divider ||\n      !this.evaluateIfFunction(this.enabled, this.currentItem);\n  }\n\n  constructor(public template: TemplateRef<{ item: any }>, public elementRef: ElementRef) { }\n\n  public evaluateIfFunction(value: any, item: any): any {\n    if (value instanceof Function) {\n      return value(item);\n    }\n    return value;\n  }\n\n  public setActiveStyles(): void {\n    this.isActive = true;\n  }\n  public setInactiveStyles(): void {\n    this.isActive = false;\n  }\n\n  public triggerExecute(item: any, $event?: MouseEvent | KeyboardEvent): void {\n    if (!this.evaluateIfFunction(this.enabled, item)) {\n      return;\n    }\n    this.execute.emit({ event: $event, item });\n  }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport { ContextMenuItemDirective } from './contextMenu.item.directive';\nimport { IContextMenuOptions } from './contextMenu.options';\nimport { ContextMenuService, IContextMenuClickEvent, CloseContextMenuEvent } from './contextMenu.service';\nimport { CONTEXT_MENU_OPTIONS } from './contextMenu.tokens';\n\nexport interface ILinkConfig {\n  click: (item: any, $event?: MouseEvent) => void;\n  enabled?: (item: any) => boolean;\n  html: (item: any) => string;\n}\nexport interface MouseLocation {\n  left?: string;\n  marginLeft?: string;\n  marginTop?: string;\n  top?: string;\n}\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'context-menu',\n  styles: [`\n    .cdk-overlay-container {\n      position: fixed;\n      z-index: 1000;\n      pointer-events: none;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n    }\n    .ngx-contextmenu.cdk-overlay-pane {\n      position: absolute;\n      pointer-events: auto;\n      box-sizing: border-box;\n    }\n  `],\n  template: ` `,\n})\nexport class ContextMenuComponent implements OnDestroy {\n  @Input() public menuClass = \"\";\n  @Input() public autoFocus = false;\n  @Input() public useBootstrap4 = false;\n  @Input() public disabled = false;\n  @Output() public close: EventEmitter<CloseContextMenuEvent> = new EventEmitter();\n  @Output() public open: EventEmitter<IContextMenuClickEvent> = new EventEmitter();\n  @ContentChildren(ContextMenuItemDirective) public menuItems: QueryList<ContextMenuItemDirective>;\n  @ViewChild('menu') public menuElement: ElementRef;\n  public visibleMenuItems: ContextMenuItemDirective[] = [];\n\n  public links: ILinkConfig[] = [];\n  public item: any;\n  public event: MouseEvent | KeyboardEvent;\n  private subscription: Subscription = new Subscription();\n\n  constructor(\n    private _contextMenuService: ContextMenuService,\n    private changeDetector: ChangeDetectorRef,\n    private elementRef: ElementRef,\n    @Optional()\n    @Inject(CONTEXT_MENU_OPTIONS) private options: IContextMenuOptions,\n  ) {\n    if (options) {\n      this.autoFocus = options.autoFocus;\n      this.useBootstrap4 = options.useBootstrap4;\n    }\n    this.subscription.add(_contextMenuService.show.subscribe(menuEvent => {\n      this.onMenuEvent(menuEvent);\n    }));\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public onMenuEvent(menuEvent: IContextMenuClickEvent): void {\n    if (this.disabled) {\n      return;\n    }\n    const { contextMenu, event, item } = menuEvent;\n    if (contextMenu && contextMenu !== this) {\n      return;\n    }\n    this.event = event;\n    this.item = item;\n    this.setVisibleMenuItems();\n    this._contextMenuService.openContextMenu({ ...menuEvent, menuItems: this.visibleMenuItems, menuClass: this.menuClass });\n    this._contextMenuService.close.asObservable().pipe(first()).subscribe(closeEvent => this.close.emit(closeEvent));\n    this.open.next(menuEvent);\n  }\n\n  public isMenuItemVisible(menuItem: ContextMenuItemDirective): boolean {\n    return this.evaluateIfFunction(menuItem.visible);\n  }\n\n  public setVisibleMenuItems(): void {\n    this.visibleMenuItems = this.menuItems.filter(menuItem => this.isMenuItemVisible(menuItem));\n  }\n\n  public evaluateIfFunction(value: any): any {\n    if (value instanceof Function) {\n      return value(this.item);\n    }\n    return value;\n  }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ContextMenuAttachDirective } from './contextMenu.attach.directive';\nimport { ContextMenuComponent } from './contextMenu.component';\nimport { ContextMenuItemDirective } from './contextMenu.item.directive';\nimport { IContextMenuOptions } from './contextMenu.options';\nimport { ContextMenuService } from './contextMenu.service';\nimport { CONTEXT_MENU_OPTIONS } from './contextMenu.tokens';\nimport { ContextMenuContentComponent } from './contextMenuContent.component';\n\n@NgModule({\n  declarations: [\n    ContextMenuAttachDirective,\n    ContextMenuComponent,\n    ContextMenuContentComponent,\n    ContextMenuItemDirective,\n  ],\n  entryComponents: [\n    ContextMenuContentComponent,\n  ],\n  exports: [\n    ContextMenuAttachDirective,\n    ContextMenuComponent,\n    ContextMenuItemDirective,\n  ],\n  imports: [\n    CommonModule,\n    OverlayModule,\n  ],\n})\nexport class ContextMenuModule {\n  public static forRoot(options?: IContextMenuOptions): ModuleWithProviders {\n    return {\n      ngModule: ContextMenuModule,\n      providers: [\n        ContextMenuService,\n        {\n          provide: CONTEXT_MENU_OPTIONS,\n          useValue: options,\n        },\n      ],\n    };\n  }\n}\n"]}